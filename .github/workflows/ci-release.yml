name: Build, Sign and Release

on:
  push:
    tags:
      - '*'

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Locate MSBuild.exe
        id: locate_msbuild
        run: |
          $vsPath = & "C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          echo "MSBUILD_PATH=$vsPath" | Out-File -FilePath $env:GITHUB_ENV -Append
        shell: pwsh

      - name: Restore NuGet packages
        run: nuget restore "Simple image server/Simple image server.sln"
        shell: pwsh

      - name: Build with MSBuild (for .NET Framework 4.8)
        run: |
          & "$env:MSBUILD_PATH" "Simple image server/Simple image server.sln" /p:Configuration=Release /p:Platform="Any CPU"
        shell: pwsh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            **/bin/Release/**

  release:
    runs-on: windows-latest
    needs: build
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build
  
      # 🧹 Find og flyt build-output ét niveau op (fjerner bin/Release/... rod)
      - name: Flatten build folder
        run: |
          $sourceRoot = Get-ChildItem -Path build -Recurse -Directory | Where-Object { Test-Path "$($_.FullName)\Simple image server.exe" } | Select-Object -First 1
  
          if (-not $sourceRoot) {
            Write-Error "Could not locate build folder containing the .exe."
            exit 1
          }
  
          New-Item -Path dist -ItemType Directory -Force
          Copy-Item -Path "$($sourceRoot.FullName)\*" -Destination dist -Recurse -Force
          Write-Output "Flattened from: $($sourceRoot.FullName)"
        shell: pwsh
  
      # 🛡️ Genskab .pfx certifikat fra Secret
      - name: Recreate .pfx Certificate
        run: |
          echo "${{ secrets.SIGN_CERTIFICATE }}" | base64 -d > signing-cert.pfx
        shell: bash
  
      # 🔏 Signér .exe og .dll i dist
      - name: Sign binaries
        run: |
          $files = Get-ChildItem -Path dist -Recurse -Include *.exe, *.dll
          foreach ($file in $files) {
            & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f signing-cert.pfx /p "${{ secrets.SIGN_PASSWORD }}" /tr http://timestamp.digicert.com /td sha256 /fd sha256 "$($file.FullName)"
          }
        shell: pwsh
  
      # 🧾 Generér korrekt updates.json og placér i Autoupdater/
      - name: Generate updates.json
        run: |
          $tag = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $updatesJson = @"
  {
    "version": "$tag",
    "sources": [
      {
        "type": "github",
        "repo": "$repo",
        "assetMatch": ".*\\.zip$"
      }
    ]
  }
  "@
          New-Item -Path dist/Autoupdater -ItemType Directory -Force
          $updatesJson | Set-Content -Encoding UTF8 "dist/Autoupdater/updates.json"
        shell: pwsh
  
      # 🗜️ Pak alt fra dist/ i zip
      - name: Create release zip
        run: |
          $tag = "${{ github.ref_name }}"
          Compress-Archive -Path dist\* -DestinationPath "SimpleImageServer-$tag.zip"
        shell: pwsh
  
      # 📝 Generér changelog
      - name: Generate Release Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ""
          failOnError: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      # 🚀 Upload release til GitHub
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            SimpleImageServer-*.zip
          name: Release ${{ github.ref_name }}
          body: |
            🎉 This is the release for version ${{ github.ref_name }}!
  
            What's Changed:
            ${{ steps.changelog.outputs.changelog }}
  
            ---
            🛡️ **Note:**  
            This build is automatically signed and timestamped.  
            Windows Defender warnings should no longer appear after trust propagation.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
